#! /usr/bin/env ruby

require "pg"
require "date"
require "io/console"

class CLI

  def initialize
    @application = ExpenseData.new
  end

  def display_help
    puts <<~TEXT
      An expense recording system
  
      Commands:
  
      add AMOUNT MEMO - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field 
      TEXT
  end
  
  def run(args)
    command = args.shift
    case command
      when "list"
        @application.list_expenses
      when "add"
        amount = arguments[0]
        memo = arguments[1]
        abort "You must provide an amount and memo." unless amount && memo
        @application.add_expense(amount, memo)
      when "search"
        term = args[0]
        abort "You must provide a search term." unless term
        @application.search_expenses(term)
      when "delete"
        id = args[0]
        abort "You must provide an expense to delete" unless id
        @application.delete_expense(id)
      when "clear"
        puts "This will remove all expenses. Are you sure? (y/n)"
        input = STDIN.getch
        @application.delete_all_expenses if input == 'y'
      else
        display_help
    end
  end
 
end

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on;")
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end
  
  
  def add_expense amount, memo
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_expenses(term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1 ORDER BY created_on;"
    result = @connection.exec_params(sql, ["%#{term}%"])
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def delete_expense(id)
    sql = "DELETE FROM expenses WHERE id = $1 RETURNING *;"
    result = @connection.exec_params(sql, [id])
    abort "There is no expense with the id '#{id}'." if result.ntuples < 1
    puts "The following expense has been deleted:"
    display_expenses(result)
  end

  def delete_all_expenses
    sql = "DELETE FROM expenses;"
    @connection.exec(sql)
    puts "All expenses have been deleted."
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]
    
      puts columns.join(" | ")
    end
    puts "-"*50
    total_amount = expenses.field_values("amount").map(&:to_f).sum
    puts "Total #{format('%.2f', total_amount.to_s).rjust(25)}"
  end

  def display_count(expenses)
    count = expenses.ntuples 
    if count < 1
      puts "There are no expenses."
    else
      grammer1 = count == 1 ? "is" : "are"
      grammer2 = count == 1 ? "expense" : "expenses"
      
      puts "There #{grammer1} #{count} #{grammer2}."
    end
  end 
  def setup_schema
    result = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL

    if result[0]["count"] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
          memo text NOT NULL,
          created_on date NOT NULL
        );
      SQL
    end
  end
end

CLI.new.run(ARGV)

